import React, { ReactNode } from "react";
import "./index.scss";
export interface InputProps {
    autoFocus?: boolean;
    actRef?: any;
    addonAfterStyle?: React.CSSProperties;
    title?: string;
    wrap?: boolean;
    wrapperClassName?: string;
    backgroundColor?: string;
    inputStyle?: React.CSSProperties;
    prefix?: any;
    suffix?: any;
    addonBefore?: ReactNode | string | number;
    addonAfter?: ReactNode | string | number;
    varient?: "outlined" | "filled" | "borderless";
    valueKey?: string;
    labelKey?: string;
    wrapperWidth?: any;
    wrapperStyle?: React.CSSProperties;
    commonSuffixContent?: string;
    clearable?: boolean;
    formStyle?: React.CSSProperties;
    suffixContentExternalClassName?: string;
    inputExternalClassName?: string;
    textEnd?: boolean;
    name?: string;
    inline?: boolean;
    isFormItem?: boolean;
    errMsg?: string;
    labelWidth?: any;
    commonSuffixIcon?: string;
    width?: any;
    label?: string;
    layout?: "horizontal" | "horizontal-top" | "vertical" | "inline";
    inputGroup?: boolean;
    labelColor?: string;
    required?: boolean;
    type?: "text" | "datetime-local" | "date" | "time" | "number" | "tag";
    defaultValue?: any;
    size?: "lg" | "default" | "sm";
    externalClassName?: string;
    prefixContent?: any;
    suffixContent?: any;
    suffixContentType?: string;
    placeholder?: string;
    style?: React.CSSProperties;
    disabled?: boolean;
    transparent?: boolean;
    children?: any;
    onClick?: (e: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;
    onFocus?: (e: React.FocusEvent<HTMLInputElement, Element>) => void;
    onBlur?: (e: React.FocusEvent<HTMLInputElement, Element>) => void;
    onChange?: (value: any) => void;
    onIconClick?: (value: string) => void;
    onFormDataChange?: (key: string, value: any) => void;
    onFieldChange?: (name: string, value: any) => void;
    onValidateField?: (name: string, value?: any) => void;
    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
}
export interface InputRef {
    validate: () => void;
    clear: () => void;
}
declare const _default: React.ComponentType<Omit<{
    inline?: boolean | undefined;
    autoFocus?: boolean | undefined;
    actRef?: any;
    isFormItem?: boolean | undefined;
    addonAfterStyle?: React.CSSProperties | undefined;
    title?: string | undefined;
    wrap?: boolean | undefined;
    wrapperClassName?: string | undefined;
    backgroundColor?: string | undefined;
    inputStyle?: React.CSSProperties | undefined;
    prefix?: any;
    suffix?: any;
    addonBefore?: React.ReactNode;
    addonAfter?: React.ReactNode;
    varient?: "outlined" | "filled" | "borderless" | undefined;
    valueKey?: string | undefined;
    labelKey?: string | undefined;
    wrapperWidth?: any;
    wrapperStyle?: React.CSSProperties | undefined;
    clearable?: boolean | undefined;
    commonSuffixContent?: string | undefined;
    formStyle?: React.CSSProperties | undefined;
    suffixContentExternalClassName?: string | undefined;
    inputExternalClassName?: string | undefined;
    textEnd?: boolean | undefined;
    name?: string | undefined;
    errMsg?: string | undefined;
    labelWidth?: any;
    commonSuffixIcon?: string | undefined;
    width?: any;
    label?: string | undefined;
    layout?: "horizontal" | "horizontal-top" | "vertical" | "inline" | undefined;
    labelColor?: string | undefined;
    required?: boolean | undefined;
    type?: "number" | "text" | "datetime-local" | "date" | "time" | "tag" | undefined;
    defaultValue?: any;
    size?: "lg" | "default" | "sm" | undefined;
    externalClassName?: string | undefined;
    prefixContent?: any;
    suffixContent?: any;
    suffixContentType?: string | undefined;
    placeholder?: string | undefined;
    style?: React.CSSProperties | undefined;
    disabled?: boolean | undefined;
    transparent?: boolean | undefined;
    children?: any;
    onClick?: ((e: React.MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined;
    onFocus?: ((e: React.FocusEvent<HTMLInputElement, Element>) => void) | undefined;
    onBlur?: ((e: React.FocusEvent<HTMLInputElement, Element>) => void) | undefined;
    onChange?: ((value: any) => void) | undefined;
    onIconClick?: ((value: string) => void) | undefined;
    onFormDataChange?: ((key: string, value: any) => void) | undefined;
    onFieldChange?: ((name: string, value: any) => void) | undefined;
    onValidateField?: ((name: string, value?: any) => void) | undefined;
    onKeyDown?: ((e: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
    ref?: React.LegacyRef<InputRef> | undefined;
    inputGroup?: boolean | undefined;
    key?: React.Key | null | undefined;
}, keyof import("react-i18next").WithTranslation<N, undefined>> & import("react-i18next").WithTranslationProps>;
export default _default;
